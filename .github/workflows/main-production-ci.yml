name: Main Production CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create nginx config for client
      - name: Create nginx config
        run: |
          cat > ./client/nginx.conf << 'EOF'
          server {
              listen 80;
              server_name localhost;
              root /usr/share/nginx/html;
              index index.html index.htm;

              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 10240;
              gzip_proxied expired no-cache no-store private auth;
              gzip_types
                  text/plain
                  text/css
                  text/xml
                  text/javascript
                  application/x-javascript
                  application/xml+rss
                  application/javascript
                  application/json;

              # Handle client-side routing (SPA)
              location / {
                  try_files $uri $uri/ /index.html;
                  add_header Cache-Control "no-cache, no-store, must-revalidate";
                  add_header Pragma "no-cache";
                  add_header Expires "0";
              }

              # Cache static assets
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/qltc-client:latest,${{ secrets.DOCKER_USERNAME }}/qltc-client:${{ github.sha }}
          build-args: |
            REACT_APP_API_URL=http://103.153.72.156:3001
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-client:buildcache,mode=max

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/qltc-server:latest,${{ secrets.DOCKER_USERNAME }}/qltc-server:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-server:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-server:buildcache,mode=max

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Navigate to project directory
            cd ${{ secrets.PROJECT_PATH }}

            # Pull latest code from main branch
            git pull origin main

            # Create .env file
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=${{ github.sha }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USER=${{ secrets.DB_USER }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down

            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull

            # Start containers
            docker-compose -f docker-compose.prod.yml up -d

            # Check container status
            sleep 10
            docker-compose -f docker-compose.prod.yml ps

            # Show logs if there are issues
            echo "=== Client Logs ==="
            docker-compose -f docker-compose.prod.yml logs --tail 10 qltc-client

            echo "=== Server Logs ==="
            docker-compose -f docker-compose.prod.yml logs --tail 10 qltc-server

            echo "=== MySQL Logs ==="
            docker-compose -f docker-compose.prod.yml logs --tail 10 mysql

            # Health check
            echo "=== Health Check ==="
            curl -f http://localhost:80 || echo "Client health check failed"
            curl -f http://localhost:3001/health || echo "Server health check failed" 